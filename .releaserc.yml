branches:
  - 'release-*'
  - 'master'
  - '+([0-9])?(.{+([0-9]),x}).x'
  - 'next'
  - 'next-major'
  - name: 'beta'
    prerelease: true
  - name: 'alpha'
    prerelease: true
ci: true
debug: true
dryRun: true
# repositoryUrl: â€” no need, will use from git origin
tagFormat: 'v${version}'

# Global plugin options (will be passed to all plugins)
preset: 'conventionalcommits'

###
# Setup plugins:
#   https://github.com/semantic-release/semantic-release/blob/caribou/docs/usage/plugins.md
###

# Responsible for verifying conditions necessary to proceed with the release:
# configuration is correct, authentication tokens are valid, etc...
verifyConditions:
  - '@semantic-release/changelog'
  # Verify the presence and the validity of the configuration
  - '@semantic-release/git'
    # Verify the presence and the validity of the Git authentication
  # and release configuration
  - '@semantic-release/github'
  # Verify the presence and the validity of the GitLab authentication
  # and release configuration

# Responsible for determining the type of the next release (major, minor or patch).
# If multiple plugins with a analyzeCommits step are defined, the release type will be
# the highest one among plugins output.
# Look details at: https://github.com/semantic-release/commit-analyzer#configuration
analyzeCommits:
  - path: '@semantic-release/commit-analyzer'
    # Determine the type of release by analyzing commits with conventional-changelog
    releaseRules:
      - breaking: true
        release: major
      - type: build     # Changes that affect the build system or external dependencies
        # (example scopes: gulp, broccoli, npm)
        release: patch
      - type: chore     # Other changes that don't modify src or test files
        release: false
      - type: ci        # Changes to our CI configuration files and scripts
        release: false
      - type: docs      # Documentation only changes
        release: patch
      - type: feat      # A new feature
        release: minor
      - type: fix       # A bug fix
        release: patch
      - type: perf      # A code change that improves performance
        release: patch
      - type: refactor  # A code change that neither fixes a bug nor adds a feature
        release: false
      - type: revert    # Reverts a previous commit
        release: patch
      - type: style     # Changes that do not affect the meaning of the code
        # (white-space, formatting, missing semi-colons, etc)
        release: false
      - type: test      # Adding missing tests or correcting existing tests
        release: false

# Responsible for generating the content of the release notes.
# If multiple plugins with a generateNotes step are defined,
# the release notes will be the result of the concatenation of each plugin output.
generateNotes:
  - path: '@semantic-release/release-notes-generator'
    writerOpts:
      groupBy: 'type'
      commitGroupsSort: 'title'
      commitsSort: 'header'
    linkCompare: true
    linkReferences: true
    parserOpts:
      # detect GitHub issues in merge commits
      issuePrefixes: ['#']
      noteKeywords: ['BREAKING CHANGE', 'BREAKING CHANGES']
    presetConfig:
      types:  # looks like it only works with 'conventionalcommits' preset
        - type: 'build'
          section: 'CI/CD'
          hidden: true
        - type: 'ci'
          section: 'CI/CD'
          hidden: true
        - type: 'chore'
          section: 'Other'
          hidden: false
        - type: 'docs'
          section: 'Docs'
          hidden: false
        - type: 'example'
          section: 'Examples'
          hidden: false
        - type: 'feat'
          section: 'Features'
          hidden: false
        - type: 'fix'
          section: 'Fixes'
          hidden: false
        - type: 'perf'
          section: 'Performance'
        - type: 'refactor'
          section: 'Refactor'
          hidden: true
        - type: 'revert'
          section: 'Reverts'
          hidden: true
        - type: 'style'
          section: 'Style'
          hidden: true
        - type: 'test'
          section: 'Tests'
          hidden: false

# Responsible for preparing the release, for example creating or updating files
# such as package.json, CHANGELOG.md, documentation or compiled assets
# and pushing a commit.
prepare:
  - path: '@semantic-release/exec'
    # Execute shell command to set package version
    cmd: './deployment/version-plaintext-set.sh ${nextRelease.version}'
  - path: '@semantic-release/exec'
    cmd: './deployment/version-oas-set.sh ${nextRelease.version} openapi.yaml'
  - path: '@semantic-release/changelog'
    # Create or update the changelog file in the local project repository
  - path: '@semantic-release/git'
    # Push a release commit and tag, including configurable files
    message: 'RELEASE: ${nextRelease.version}'
    assets: ['CHANGELOG.md', 'version', 'openapi.yaml']

# Responsible for publishing the release.
publish:
  - path: '@semantic-release/github'
    # Publish a GitLab release
    #  (https://docs.gitlab.com/ce/user/project/releases/index.html#add-release-notes-to-git-tags)

success:
  - path: 'semantic-release-slack-bot'
    # Publish a message about the success to a slack channel
    notifyOnSuccess: true
    markdownReleaseNotes: false
    onSuccessTemplate:
      # // example params for mattermost
      channel: 'your-channel-name'
      text: 'Hello, this is some text :tada:'
      attachments:
        - color: '#00c100'
          title: '$package_name'
          title_link: '$repo_url'
          pretext: 'This is optional pretext that shows above the attachment.'
          text: '$release_notes'
          footer: 'version: $npm_package_version'
    # // example blocks for slack
    #   blocks:
    #     - type: 'section'
    #       text:
    #         type: 'mrkdwn'
    #         text: '*`$package_name` released!*'
    #     - type: 'section'
    #       text:
    #         type: 'mrkdwn'
    #         text: '$release_notes'
    #     - type: 'divider'
    #     - type: 'context'
    #       elements:
    #         - type: 'mrkdwn'
    #           text: "ðŸ“¦  *assets:* <$repo_url/releases/$npm_package_version|$npm_package_version>"

fail:
  - path: 'semantic-release-slack-bot'
    # publish a message about failure to a slack channel
    notifyOnFail: true